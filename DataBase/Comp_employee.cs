using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Windows.Forms;
using Npgsql;

namespace DataBase
{
    public partial class Comp_employee : Form
    {
        private NpgsqlConnection npgSqlConnection;
        NpgsqlCommand sqlCommand;
        DataTable dt;
        NpgsqlDataReader dataReader;
        //string connectionString = "Server = localhost;" + "Port = 5432;" + "Database = Дидур;" + "User Id = postgres;" + "Password = vadim;";подключение для генерации пользователей
        private string sql = "";
        String id = "";//id для справочников
        string connectionString = "";
        public Comp_employee(string usersurname, string userpassword)
        {
            InitializeComponent();
            this.usersurname = usersurname;
            this.userpassword = userpassword;
            Text = "Пользователь " + usersurname;
            button2.Visible = false;
            label2.Text = "Обновить данные";
            //label1.Text = "сотрудник детского сада";//label1.Text = "сотрудник предприятия";поле для генерации
            connectionString = "Server = localhost;" + "Port = 5432;" + "Database = Дидур;" + "User Id = '" + usersurname + "';" + "Password = '" + userpassword + "';";
        }
        private string usersurname;
        private string userpassword;
        /// <summary>
        /// Метод вычисления количества ячеек в таблице
        /// </summary>
        private int GetCountOfFilledCells(int columnIndex)
        {
            int count = 0;
            for (int i = 0; i < dataGridView1.RowCount; i++)
            {
                if (dataGridView1[columnIndex, i].Value != null &&
                    dataGridView1[columnIndex, i].Value.ToString() != String.Empty)
                    count++;
            }
            return count;
        }
        /// <summary>
        /// Метод загрузки таблицы
        /// </summary>
        public void Load_dataGridView()
        {
            try
            {
                if (npgSqlConnection != null && npgSqlConnection.State != ConnectionState.Closed)
                {
                    npgSqlConnection.Close();
                }
                npgSqlConnection = new NpgsqlConnection(connectionString);
                npgSqlConnection.Open();

                sqlCommand = new NpgsqlCommand(sql, npgSqlConnection);
                dataReader = sqlCommand.ExecuteReader();
                dt = new DataTable();
                dt.Load(dataReader);
                dataGridView1.DataSource = dt;
                dataGridView1.AutoResizeColumns();
                
                npgSqlConnection.Close();
                label5.Text = "Всего заполненно " + GetCountOfFilledCells(0).ToString() + " строк";
                dataGridView1.ReadOnly = true; 
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message);
                npgSqlConnection.Close();
            }
        }
        private void помощьДетскимСадамToolStripMenuItem_Click(object sender, EventArgs e)
        {
            label1.Text = "помощь детским садам";
            command_sql_select();
            Load_dataGridView();
            button2.Text = "Добавить платёж";
            button2.Visible = true;
        }

        private void помощьДетямToolStripMenuItem_Click(object sender, EventArgs e)
        {
            label1.Text = "помощь детям";
            command_sql_select();
            Load_dataGridView();
            button2.Text = "Добавить платёж";
            button2.Visible = true;
        }
       
        /// <summary>
        /// Команды для загрузки таблицы из бд
        /// </summary>
        public void command_sql_select()
        {
            if (label1.Text == "помощь детским садам")
            {
                sql = "SELECT  id_assistance as \"ID\",  caption as \"Детсад\",  \"type\" as \"Вид помощи\",  \"cost\" as \"Стоимость\",  \"date\" as \"Дата оказания\" FROM  \"Assistance to kindergarten\" INNER JOIN \"Kindergarten\" ON \"Assistance to kindergarten\".id_kindergarten = \"Kindergarten\".id_kindergarten  INNER JOIN \"Type of garden assistance\" ON \"Assistance to kindergarten\".id_type = \"Type of garden assistance\".id_type";
            }
            else if (label1.Text == "помощь детям")
            {
                sql = "SELECT  id_assistance as \"ID\",  concat_ws(' ',surname,\"Child\".\"name\",patronymic) as \"Ребёнок\",  \"type\" as \"Вид помощи\",  \"cost\" as \"Стоимость\",  \"date\" as \"Дата оказания\" FROM  \"Assistance to children\"  INNER JOIN \"Child\" ON \"Assistance to children\".id_child = \"Child\".id_child  INNER JOIN \"Type of children assistance\" ON \"Assistance to children\".id_type = \"Type of children assistance\".id_type";
            }
        }
        /// <summary>
        /// Команды для удаления из БД по ID
        /// </summary>
        private void command_sql_delete()
        {
            if (label1.Text == "помощь детским садам")
            {
                sql = "DELETE FROM \"Assistance to kindergarten\" WHERE id_assistance in (" + delete + ");";
            }
            else if (label1.Text == "помощь детям")
            {
                sql = "DELETE FROM \"Assistance to children\" WHERE id_assistance in (" + delete + ");";
            }
        }
        /// <summary>
        /// Команды для поиска в БД (сделать, чтобы искало по отделениям(чужие записи не показывать))
        /// </summary>
        string value_for_search = "";
        private void command_sql_search()
        {
            value_for_search = textBox3.Text;
            if (label1.Text == "помощь детским садам")
            {
                sql = "SELECT  id_assistance as \"ID\",  caption as \"Детсад\",  \"type\" as \"Вид помощи\",  \"cost\" as \"Стоимость\",  \"date\" as \"Дата оказания\",  \"name\" as \"Название предприятия\"  FROM  \"Assistance to kindergarten\"  INNER JOIN \"Kindergarten\" ON \"Assistance to kindergarten\".id_kindergarten = \"Kindergarten\".id_kindergarten  INNER JOIN \"Type of garden assistance\" ON \"Assistance to kindergarten\".id_type = \"Type of garden assistance\".id_type  INNER JOIN \"Company\" ON \"Assistance to kindergarten\".id_company = \"Company\".id_company WHERE type = '" + value_for_search + "' or \"Company\".name = '" + value_for_search + "'or caption = '" + value_for_search + "' ";
            }
            else if (label1.Text == "помощь детям")
            {
                sql = "SELECT  id_assistance as \"ID\",  concat_ws(' ',surname,\"Child\".\"name\",patronymic) as \"Ребёнок\",  \"type\" as \"Вид помощи\",  \"cost\" as \"Стоимость\",  \"date\" as \"Дата оказания\",  \"Company\".\"name\" as \"Название предприятия\"  FROM  \"Assistance to children\"  INNER JOIN \"Child\" ON \"Assistance to children\".id_child = \"Child\".id_child  INNER JOIN \"Type of children assistance\" ON \"Assistance to children\".id_type = \"Type of children assistance\".id_type  INNER JOIN \"Company\" ON \"Assistance to children\".id_company = \"Company\".id_company WHERE type = '" + value_for_search + "' or \"Company\".name = '" + value_for_search + "'or caption = '" + value_for_search + "' or \"Child\".name = '" + value_for_search + "' or surname = '" + value_for_search + "' or patronymic = '" + value_for_search + "'";
            }
        }
        /// <summary>
        /// Метод удаления записи по ID
        /// </summary>
        List<int> Selected = new List<int>();
        string temp = ""; string delete = "";
        private void delete_dataGridView()
        {
            foreach (DataGridViewCell cell in dataGridView1.SelectedCells)
            {
                if (cell.ColumnIndex == 0)
                {
                    Selected.Add((int)cell.Value);
                }
            }
            foreach (int temp1 in Selected)
            {
                temp += temp1.ToString() + ",";
            }
            char[] MyChar = {','};
            delete = temp.TrimEnd(MyChar);

            command_sql_delete();
            try
            {
                npgSqlConnection = new NpgsqlConnection(connectionString);
                npgSqlConnection.Open();
                sqlCommand = new NpgsqlCommand(sql, npgSqlConnection);
                sqlCommand.ExecuteNonQuery();
                npgSqlConnection.Close();
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message);
                npgSqlConnection.Close();
            }
            delete = "";
            command_sql_select();
            Load_dataGridView();
        }
        /// <summary>
        /// Кнопка для поиска
        /// </summary>
        private void button4_Click(object sender, EventArgs e)
        {
            command_sql_search();
            Load_dataGridView();
            if(label5.Text == "Всего заполненно 0 строк") {
                MessageBox.Show("Поиск не дал результата");
                command_sql_select();
                Load_dataGridView();
            }
            textBox3.Clear();
        }
        /// <summary>
        /// Метод для добавления в таблицу(открытие новой формы, а там уже вся красота)
        /// </summary>
        private void dataGridView1_DoubleClick(object sender, EventArgs e)
        {
            string Name = label1.Text;
            int selectedrowindex = dataGridView1.SelectedCells[0].RowIndex;
            DataGridViewRow selectedRow = dataGridView1.Rows[selectedrowindex];
            string id = Convert.ToString(selectedRow.Cells[0].Value);
            Add_information add_information = new Add_information(Name, id, usersurname, userpassword);

             if (Name == "помощь детским садам")
            {
                add_information.ID.Text = dataGridView1.CurrentRow.Cells[0].Value.ToString();
                add_information.ComboBox1.Text = dataGridView1.CurrentRow.Cells[1].Value.ToString();
                add_information.ComboBox2.Text = dataGridView1.CurrentRow.Cells[2].Value.ToString();
                add_information.TextBox1.Text = dataGridView1.CurrentRow.Cells[3].Value.ToString();
                add_information.DateTimePicker1.Text = dataGridView1.CurrentRow.Cells[4].Value.ToString();
            }
            else if (Name == "помощь детям")
            {
                add_information.ID.Text = dataGridView1.CurrentRow.Cells[0].Value.ToString();
                add_information.ComboBox1.Text = dataGridView1.CurrentRow.Cells[1].Value.ToString();
                add_information.ComboBox2.Text = dataGridView1.CurrentRow.Cells[2].Value.ToString();
                add_information.TextBox1.Text = dataGridView1.CurrentRow.Cells[3].Value.ToString();
                add_information.DateTimePicker1.Text = dataGridView1.CurrentRow.Cells[4].Value.ToString();
            }
            if (dataGridView1.CurrentRow.Cells[0].Value.ToString() != "")
            {
                add_information.button1.Text = "Изменить";
            }
            add_information.ShowDialog();
        }
        /// <summary>
        /// Метод обновления базы данных
        /// </summary>
        private void label1_Click(object sender, EventArgs e)
        {
            command_sql_select();
            Load_dataGridView();
        }
        /// <summary>
        /// Удаление через кнопку Delete
        /// </summary>
        private void dataGridView1_UserDeletingRow(object sender, DataGridViewRowCancelEventArgs e)
        {
            if (MessageBox.Show("Вы действительно хотите удалить?", "Удаление", MessageBoxButtons.OKCancel, MessageBoxIcon.Question) == DialogResult.Cancel)
            {
                e.Cancel = true;
                command_sql_select();
                Load_dataGridView();
            }
            else
            {
                int selectedrowindex = dataGridView1.SelectedCells[0].RowIndex;
                DataGridViewRow selectedRow = dataGridView1.Rows[selectedrowindex];
                id = Convert.ToString(selectedRow.Cells[0].Value);
                delete_dataGridView(); 
            }
            command_sql_select();
            Load_dataGridView();
        }
        /// <summary>
        /// Кнопка "Добавить запись в таблицу"(открытие новой формы)
        /// </summary>
        private void button2_Click(object sender, EventArgs e)
        {
            try
            {
                string id;
                int selectedrowindex = dataGridView1.SelectedCells[0].RowIndex;
                DataGridViewRow selectedRow = dataGridView1.Rows[selectedrowindex];
                id = Convert.ToString(selectedRow.Cells[0].Value);

                string Name = label1.Text;
                Add_information add_information = new Add_information(Name, id, usersurname, userpassword);
                add_information.ShowDialog();
            }
            catch (Exception) { MessageBox.Show("Вы не выбрали таблицу"); }
        }    
        /// <summary>
        /// Генерация записей
        /// </summary>
        private void button5_Click(object sender, EventArgs e)
        {
            List<string> surname = new List<string>() { "Канадов", "Яковлев", "Островерхов", "Лоськов", "Иванников", "Крутой", "Яшагин", "Руских", "Друганин", "Пономарёв", "Супрунов", "Попков", "Фотин", "Ухтомский", "Кругликов", "Тизенгаузен", "Пшеничников", "Бухало", "Чадов", "Яблонский", "Помелов", "Малютин", "Садков", "Нямин", "Вицин", "Коровин", "Сияница", "Огарков", "Славаков", "Кручинин", "Вихров", "Яробкин", "Кузуб", "Силаев", "Кучеров", "Авдиенко", "Магазинер", "Енотин", "Лаврентьев", "Килиц", "Болтоногов", "Фёдоров", "Суворкин", "Чичканов", "Борхес", "Седельников", "Чернаков", "Сенькин", "Язвецов", "Амалиев", "Каштанов", "Данильцин", "Бубенцов", "Куратник", "Большаков", "Брантов", "Шуршалин", "Дасаев", "Пыстогов", "Бибиков", "Железкин", "Охрема", "Талызин", "Забабурин", "Курсалин", "Ягутян", "Лещёв", "Мещеряков", "Угольников", "Сизов", "Михальченко", "Елизаров", "Дураничев", "Нюнка", "Нуряев", "Никишов", "Сафиюлин", "Власов", "Цитников", "Яресько", "Глухов", "Бурый", "Дубровский", "Тургенев", "Кярбер", "Царско", "Бруевич", "Юрков", "Васютин", "Ясенков", "Цыгвинцев", "Максимов", "Туров", "Курбонмамадов", "Чюличков", "Зарица", "Малинов", "Игошев", "Грушецкий", "Весовой", "Кирилловский", "Зонов", "Мышелов", "Иволгин", "Шишлов", "Ловзанский", "Мамонов", "Филенков", "Яблоновский", "Леонидов", "Савин", "Кутепов", "Сазонтов", "Винтухов", "Константинов", "Воейков", "Пушной", "Паршин", "Чиграков", "Сигов", "Зыков", "Шадрин", "Мухин", "Килин", "Ешевский", "Степанков", "Стародубцев", "Горбачёв", "Хемлин", "Левченко", "Агапов", "Беляев", "Рябоконь", "Коржаков", "Аглеев", "Ямбаев", "Гавриленков", "Колущинский", "Холопов", "Бочкарёв", "Сиянкин", "Кумовьев", "Шеховцов", "Клюев", "Путинов", "Яременко", "Царегородцев", "Якшибаев", "Чистяков", "Мещеряков", "Маслак", "Чигиркин", "Карташов", "Есенин", "Колпаков", "Сиянцев", "Носков", "Аршавин", "Ермилов", "Цирульников", "Лукьяненко", "Чепурин", "Стукалов", "Парамонов", "Перешивкин", "Мурогов", "Клюкин", "Каверин", "Ионов", "Камкин", "Квитко", "Кошечкин", "Бутылин", "Голышев", "Кирьяков", "Дуркин", "Квартальнов", "Живков", "Чупахин", "Апакидзе", "Бондарчук", "Леонов", "Таначёв", "Шереметьев", "Можаев", "Лужков", "Румянцев", "Коротков", "Бурда", "Васенин", "Граббе", "Кондучалов", "Фёдоров", "Пшеничников", "Холодов", "Колокольцов", "Шпак", "Тредиаковский", "Кондрат", "Дубков", "Шумилова", "Вастьянова", "Заболотная", "Яковец", "Дубинина", "Рогова", "Задорнова", "Мячикова", "Грибкова", "Ржевская", "Агальцова", "Ивашова", "Сиянко", "Дасаева", "Плюхина", "Эскина", "Чернявская", "Переверзева", "Данилова", "Островская", "Левкина", "Яицкая", "Лоскутова", "Хватова", "Циглер", "Шипицина", "Мирохина", "Фирсова", "Седова", "Никольская", "Хорошавцева", "Кярбер", "Железнова", "Петракова", "Майсака", "Вицина", "Силиванова", "Яимова", "Яфаева", "Витвинина", "Кузькина", "Лашкина", "Салтанова", "Никандрова", "Питосина", "Терехова", "Торопова", "Русакова", "Яхимович", "Мухортова", "Маматова", "Жидкова", "Майструк", "Рощина", "Рязанова", "Ильясова", "Дворникова", "Акинфеева", "Стародубова", "Икрамова", "Валуева", "Стукалова", "Балунова", "Куцака", "Петрова", "Званцева", "Чупалова", "Никольникова", "Румянцева", "Андропова", "Бурякова", "Кораблина", "Лесничая", "Евтушенкова", "Чунц", "Михалицына", "Волобуева", "Горбачёва", "Щеголева", "Нырко", "Решетникова", "Корнейчук", "Евдокимова", "Ярная", "Потапова", "Курдина", "Ермушина", "Юмашева", "Богатырёва", "Тизенгаузена", "Марченко", "Бердяева", "Авилова", "Барышникова", "Райта", "Низовцова", "Бирюкова", "Царёва", "Янкова", "Холостых", "Яхаева", "Кулагинская", "Чкалова", "Бурцова", "Яцкевич", "Хренова", "Смирнитская", "Умберг", "Бармыкина", "Акинфеева", "Фастер", "Ручкина", "Мосякова", "Геремеш", "Ефремова", "Широких", "Ворожцова", "Конева", "Травникова", "Грибкова", "Желвакова", "Чемериса", "Петрова", "Милорадова", "Васютина", "Ахременко", "Амалиева", "Селиванова", "Одинцова", "Стрельцова", "Лунькова", "Гурковская", "Криворотова", "Савенкова", "Зухина", "Яговкина", "Ожогина", "Захарова", "Ратникова", "Шайна", "Распутина", "Бобр", "Сияновича", "Еромеева", "Яшунина", "Чалая", "Эвентова", "Кравцева", "Рыжикова", "Пушная", "Тевосова", "Кравчука", "Семенова", "Шверник", "Карабатова", "Баскакова", "Устимовича", "Лягушова", "Башкатова", "Степашина", "Попырина", "Хохорина", "Антонова", "Кияк", "Бурая", "Железкина", "Лягушкина", "Асланова", "Новомейская", "Муравьева", "Ивакина", "Корявина", "Виноградова", "Эзрина", "Черенчикова", "Слобожанина", "Летавина", "Родзянко", "Канунникова", "Костомарова", "Яхонтова", "Михалицина", "Кооскора", "Катькина", "Елисеева", "Голумбовская", "Голова", "Владимирова", "Таганцева", "Рыбакова", "Максимова", "Гришина", "Забродина", "Шихина", "Бутикова", "Абалихина", "Сомкина", "Мельник", "Усачёва", "Суслякова", "Марченко", "Рощина", "Бегичева", "Искрицкая", "Кудайбергенова", "Новицкая", "Рыбалкина", "Содовская", "Алиева", "Соловаьева", "Яркова", "Лыткина", "Рыжова", "Эверская", "Медведева", "Носатенко", "Ярная", "Яглинцева", "Антимонова", "Гачегова", "Язькова", "Кологреева", "Усатова", "Кондрат", "Голубцова", "Рутберг", "Нестерова", "Яковенко", "Худовекова", "Евтушенкова", "Ряполова", "Самойлова", "Пожарская", "Другаль", "Комиссарова", "Островерха", "Мятлева", "Хамидуллина", "Квартовская", "Полотенцева", "Грехова", "Кравец", "Аглеева", "Гриневеца", "Грицевец", "Энтская", "Табернакулова", "Курышина", "Пугачёва", "Слукина", "Истомина", "Куанышбаева", "Сенотрусова", "Элиашева", "Драчёва", "Тычкина", "Бореева", "Фотеева", "Тоболенко", "Тимирёва", "Рожкова", "Бескрёстнова", "Забабурина", "Никулаичева", "Гадолина", "Савасина", "Блатова", "Юферева", "Мананникова", "Бурова", "Любова", "Копейкина", "Чудова", "Власова", "Халимдарова", "Анреп", "Казнова", "Аксакова", "Загидуллина", "Ивашина", "Островерхова", "Боярова", "Киселёва", "Скворцова", "Ивашева", "Осенныха", "Янибекова", "Чичваркина", "Садыкова", "Якушкина", "Мамина", "Лапаева", "Щегельская", "Тарновецкая", "Михеева", "Щеглова", "Чубарова", "Куклина", "Ларичев", "Канадцев", "Куксюк", "Яненко", "Пищиков", "Пушной", "Матизов", "Шинский", "Петров", "Лапидус", "Зонов", "Дудник", "Брагин", "Лубашев", "Грачёв", "Кондучалов", "Золотухин", "Платущихин", "Брынских", "Канунников", "Чернобровин", "Гандельман", "Тюрин", "Шангин", "Карамзин", "Панфилов", "Вельдин", "Сязи", "Кулактин", "Глускин", "Миков", "Квартальнов", "Колокольцов", "Перешивкин", "Сиянин", "Рудавин", "Свечин", "Трухин", "Хребтов", "Полторак", "Давыдкин", "Никаев", "Суслов", "Бурмакин", "Куракин", "Карандасов", "Листунов", "Кривоплясов", "Кузнецов", "Толстой", "Удом", "Порсев", "Канадин", "Зворыгин", "Яблонов", "Шамов", "Игнатов", "Луков", "Битнер", "Эверлаков", "Новохацкий", "Якобсон", "Старков", "Минкин", "Аспидов", "Луньков", "Гришко", "Рытов", "Кузик", "Бухаров", "Корчагин", "Шерков", "Ляпин", "Чупалов", "Якушов", "Островский", "Аслаханов", "Парфёнов", "Купревич", "Толбугин", "Губанов", "Ассоров", "Дубин", "Анников", "Оболенский", "Гуринов", "Яров", "Веденеев", "Ягунов", "Черников", "Карандашов", "Камкин", "Болотников", "Махнёв", "Мелехов", "Лилов", "Сорокин", "Сахаровский", "Деменок", "Маматов", "Гришаев", "Григолюк", "Сьянов", "Каракозов", "Дрягин", "Сыромятников", "Голов", "Косоруков", "Волков", "Утёсов", "Дмитровский", "Покровский", "Кривонос", "Рощин", "Чупров", "Апевалов", "Воронин", "Пьянков", "Сиянский", "Браславец", "Суружу", "Лагошин", "Ожгибесов", "Поварницын", "Пярин", "Веточкин", "Сысоев", "Чиркаш", "Дорофеев", "Кудашов", "Краснянский", "Юмашев", "Бережной", "Мощенский", "Ухтомский", "Хуторской", "Левин", "Плеханов", "Юрьев", "Амалиев", "Кучеров", "Кондуров", "Седых", "Тихоненко", "Якухин", "Званцов", "Посохов", "Курневич", "Янков", "Цитников", "Болдаев", "Шаляпин", "Кортнев", "Кравчук", "Куклов", "Алиев", "Кривов", "Янкелевич", "Михно", "Кабалкин", "Бажанов", "Самсонов", "Переверзев", "Ясногородский", "Деникин", "Нырцев", "Вельдин", "Орехов", "Коломийцев", "Куксюк", "Султанов", "Шабунин", "Тальдаев", "Блохин", "Лосевский", "Фукин", "Корнеев", "Копориков", "Волобуев", "Сухарников", "Каунайте", "Блаженов", "Гуковский", "Якунчиков", "Якушкин", "Эсмонд", "Кривков", "Саянков", "Саитов", "Дроков", "Перминов", "Чюличков", "Русанов", "Трусов", "Клюкин", "Фахриев", "Гаголин", "Яблочков", "Мармазов", "Леонов" };
            List<string> name = new List<string>() { "Никита", "Вадим", "Вацлав", "Платон", "Ерофей", "Вениамин", "Юлиан", "Осип", "Адриан", "Всеволод", "Валентин", "Рубен", "Валерий", "Богдан", "Мстислав", "Макар", "Иннокентий", "Данил", "Изяслав", "Ираклий", "Радион", "Кирилл", "Станислав", "Якуб", "Артемий", "Евстигней", "Саввелий", "Юлий", "Георгий", "Максимильян", "Эмиль", "Евлампий", "Прокофий", "Герасим", "Онисим", "Даниил", "Игорь", "Роман", "Феликс", "Лаврентий", "Аким", "Тихон", "Пахом", "Евдоким", "Лавр", "Фадей", "Евгений", "Измаил", "Вячеслав", "Никифор", "Никон", "Антон", "Карп", "Виталий", "Еремей", "Мефодий", "Лев", "Сократ", "Денис", "Натан", "Филипп", "Тарас", "Алексей", "Карл", "Ефрем", "Всеслав", "Моисей", "Рюрик", "Венедикт", "Марк", "Константин", "Пимен", "Петр", "Нестор", "Михей", "Иван", "Сергей", "Агафон", "Артем", "Касьян", "Ян", "Егор", "Мечислав", "Виссарион", "Кир", "Клавдий", "Авдей", "Радислав", "Антип", "Фома", "Парфен", "Игнатий", "Владислав", "Максим", "Родион", "Артур", "Елисей", "Остап", "Владимир", "Захар", "Василий", "Тимофей", "Агафон", "Филимон", "Артур", "Андриян", "Станислав", "Рубен", "Мартын", "Сергей", "Кондрат", "Евгений", "Глеб", "Ян", "Пахом", "Сидор", "Терентий", "Дементий", "Онуфрий", "Владлен", "Данила", "Роман", "Антон", "Вячеслав", "Лука", "Лаврентий", "Михаил", "Архип", "Руслан", "Владислав", "Григорий", "Назар", "Моисей", "Борислав", "Саввелий", "Клавдий", "Чеслав", "Прокофий", "Артём", "Аристарх", "Измаил", "Ипполит", "Мстислав", "Эмиль", "Сократ", "Герасим", "Никанор", "Якуб", "Бронислав", "Всеволод", "Валентин", "Мефодий", "Владимир", "Вениамин", "Потап", "Степан", "Игнат", "Мирон", "Юрий", "Поликарп", "Валерий", "Андрон", "Емельян", "Серафим", "Александр", "Андрей", "Карп", "Тит", "Казимир", "Осип", "Всеслав", "Панкратий", "Еремей", "Елисей", "Эдуард", "Леондий", "Никита", "Гавриил", "Святослав", "Макар", "Родион", "Иосиф", "Феоктист", "Феликс", "Наум", "Кирилл", "Семён", "Илья", "Соломон", "Эрнест", "Лукьян", "Афанасий", "Лавр", "Самуил", "Эммануил", "Николай", "Олег", "Кузьма", "Виктор", "Иван", "Эвелина", "Надежда", "Вера", "Диана", "Клара", "Римма", "Изабелла", "Агния", "Марфа", "Изольда", "Лилия", "Наталья", "Лада", "Рада", "Лиана", "Василиса", "Владислава", "Бронислава", "Стела", "Инга", "Нина", "Ираида", "Софья", "Яна", "Фаина", "Зинаида", "Ефросиния", "Юнона", "Тамара", "Марта", "Пелагея", "Анастасия", "Милена", "Инесса", "Ульяна", "Татьяна", "Людмила", "Таисия", "Ника", "Варвара", "Ефросинья", "Ольга", "Валерия", "Дарья", "Любава", "Евдокия", "Анна", "Зоя", "Жанна", "Ариадна", "Ангелина", "Ева", "Лидия", "Ярослава", "Кристина", "Элеонора", "Агафья", "Аза", "Полина", "Розалия", "Майя", "Оксана", "Виктория", "Эльвира", "Эмма", "Светлана", "Любовь", "Елена", "Ксения", "Маргарита", "Нона", "Христина", "Марина", "Инна", "Евгения", "Доминика", "Александра", "Альбина", "Валентина", "Роза", "Антонина", "Юлия", "Злата", "Всеслава", "Влада", "Ирина", "Берта", "Рената", "Эмилия", "Мария", "Анфиса", "Алина", "Мирослава", "Екатерина", "Анисья", "Владлена", "Кира", "Арина", "Галина", "Янина", "Арина", "Елена", "Бронислава", "Анисья", "Регина", "Анна", "Евгения", "Кристина", "Софья", "Евдокия", "Наталья", "Ирина", "Нона", "Диана", "Оксана", "Зинаида", "Рада", "Ева", "Виктория", "Людмила", "Рената", "Эвелина", "Раиса", "Валентина", "Любава", "Каролина", "Лариса", "Нина", "Эльвира", "Ираида", "Дина", "Янина", "Полина", "Влада", "Зоя", "Тамара", "Анастасия", "Милена", "Алла", "Ефросиния", "Ангелина", "Ника", "Василиса", "Всеслава", "Ксения", "Марта", "Изабелла", "Инесса", "Дарья", "Ольга", "Вера", "Александра", "Лидия", "Юнона", "Эмма", "Яна", "Елизавета", "Инна", "Фаина", "Стела", "Наталия", "Ариадна", "Владлена", "Агния", "Лилия", "Эмилия", "Вероника", "Элеонора", "Роза", "Татьяна", "Клара", "Марфа", "Римма", "Мария", "Берта", "Надежда", "Любовь", "Злата", "Альбина", "Майя", "Антонина", "Екатерина", "Кира", "Ульяна", "Юлия", "Галина", "Ефросинья", "Аза", "Доминика", "Ярослава", "Христина", "Марианна", "Марина", "Владислава", "Жанна", "Мирослава", "Анфиса", "Изольда", "Валерия", "Маргарита", "Жанна", "Ариадна", "Татьяна", "Изабелла", "Наталья", "Ульяна", "Анисья", "Янина", "Элеонора", "Полина", "Екатерина", "Юлия", "Марта", "Зоя", "Алла", "Ангелина", "Галина", "Инна", "Лариса", "Ника", "Регина", "Светлана", "Кира", "Вера", "Валентина", "Вероника", "Маргарита", "Майя", "Рада", "Елена", "Дарья", "Милена", "Берта", "Мирослава", "Мария", "Ксения", "Зинаида", "Нона", "Стела", "Доминика", "Надежда", "Агафья", "Марина", "Лада", "Варвара", "Оксана", "Всеслава", "Марианна", "Алиса", "Эльвира", "Розалия", "Любовь", "Алина", "Ярослава", "Анфиса", "Римма", "Диана", "Ирина", "Анастасия", "Инга", "Ираида", "Анна", "Людмила", "Фаина", "Инесса", "Каролина", "Эвелина", "Марфа", "Софья", "Александра", "Эмилия", "Наталия", "Пелагея", "Роза", "Альбина", "Арина", "Ефросиния", "Влада", "Нина", "Рената", "Кристина", "Антонина", "Злата", "Лиана", "Эмма", "Евгения", "Лидия", "Тамара", "Ольга", "Таисия", "Виктория", "Елизавета", "Лилия", "Дина", "Владлена", "Ева", "Ефросинья", "Юнона", "Раиса", "Василиса", "Глеб", "Изяслав", "Рюрик", "Ерофей", "Соломон", "Игорь", "Родион", "Эдуард", "Лаврентий", "Модест", "Бронислав", "Константин", "Лавр", "Ким", "Рубен", "Тимофей", "Ипполит", "Платон", "Иван", "Владлен", "Аким", "Осип", "Валерьян", "Емельян", "Семён", "Давид", "Чеслав", "Наум", "Дементий", "Федор", "Пимен", "Назар", "Эмиль", "Леонид", "Марк", "Агафон", "Евлампий", "Андрей", "Онисим", "Макар", "Всеслав", "Харитон", "Аскольд", "Венедикт", "Игнат", "Василий", "Дмитрий", "Самсон", "Лука", "Варфоломей", "Архип", "Викентий", "Матвей", "Поликарп", "Вадим", "Андрон", "Мартьян", "Терентий", "Аркадий", "Никифор", "Еремей", "Ираклий", "Петр", "Алексей", "Натан", "Савелий", "Олег", "Степан", "Клавдий", "Феоктист", "Артур", "Антип", "Саввелий", "Казимир", "Кузьма", "Кир", "Виссарион", "Сигизмунд", "Серафим", "Артемий", "Вениамин", "Евдоким", "Карл", "Феликс", "Кондратий", "Святослав", "Александр", "Мечислав", "Денис", "Леондий", "Зиновий", "Тихон", "Артем", "Парфен", "Пахом", "Тит", "Фока", "Остап", "Мстислав", "Фадей", "Тит", "Андриян", "Агафон", "Петр", "Артём", "Пахом", "Евгений", "Поликарп", "Еремей", "Валентин", "Эрнст", "Михей", "Архип", "Клавдий", "Панкратий", "Семён", "Степан", "Лавр", "Карп", "Андрон", "Потап", "Эдуард", "Авдей", "Саввелий", "Феликс", "Федот", "Сидор", "Евсей", "Казимир", "Ярослав", "Эрнест", "Феофан", "Фома", "Рубен", "Антип", "Фадей", "Трофим", "Юлий", "Севастьян", "Даниил", "Глеб", "Афанасий", "Соломон", "Максим", "Эммануил", "Аким", "Виталий", "Фока", "Игорь", "Касьян", "Кондратий", "Никанор", "Адриан", "Радислав", "Терентий", "Алексей", "Денис", "Эмиль", "Демьян", "Радион", "Аристарх", "Мечислав", "Моисей", "Богдан", "Игнат", "Валерий", "Назар", "Лев", "Игнатий", "Пимен", "Дементий", "Григорий", "Геннадий", "Ефим", "Тимофей", "Натан", "Нестор", "Платон", "Ерофей", "Герасим", "Елизар", "Василий", "Всеволод", "Остап", "Гавриил", "Мартын", "Артемий", "Никифор", "Андрей", "Иван", "Серафим", "Самуил", "Ипатий", "Кузьма", "Гаврила", "Иларион", "Дмитрий", "Федор", "Виктор", "Лаврентий" };
            List<string> patronymic = new List<string>() { "Карлович", "Назарович", "Михаилович", "Ипполитович", "Аполлинариевич", "Ерофеевич", "Денисович", "Ильевич", "Анатолиевич", "Иванович", "Валериевич", "Якубович", "Гаврилевич", "Владиславович", "Данилевич", "Панкратиевич", "Саввевич", "Ипатович", "Мирославович", "Измаилович", "Прохорович", "Артемович", "Левович", "Мартьянович", "Георгиевич", "Леонтиевич", "Капитонович", "Захарович", "Филимонович", "Родионович", "Феликсович", "Онисимович", "Агапович", "Сократович", "Натанович", "Всеволодович", "Евстафиевич", "Эрнестович", "Прокофиевич", "Тарасович", "Потапович", "Епифанович", "Викентиевич", "Брониславович", "Яковович", "Матвеевич", "Остапович", "Федотович", "Ипатиевич", "Миронович", "Савелиевич", "Никитевич", "Пахомович", "Вадимович", "Дмитриевич", "Егорович", "Филиппович", "Евгениевич", "Трофимович", "Владимирович", "Игнатиевич", "Никифорович", "Сергеевич", "Аникитевич", "Казимирович", "Иосифович", "Евграфович", "Никонович", "Архипович", "Сидорович", "Изяславович", "Елисеевич", "Севастьянович", "Федорович", "Куприянович", "Глебович", "Демьянович", "Афанасиевич", "Серафимович", "Мечиславович", "Венедиктович", "Адамович", "Самуилович", "Леонидович", "Несторович", "Святославович", "Климентович", "Платонович", "Самсонович", "Давыдович", "Елизарович", "Фомевич", "Модестович", "Арсениевич", "Онуфриевич", "Касьянович", "Ермолаевич", "Кондратиевич", "Андронович", "Игоревич", "Мирославович", "Маркович", "Эрнестович", "Миронович", "Савелиевич", "Сергеевич", "Валериевич", "Наумович", "Георгиевич", "Алексеевич", "Игнатиевич", "Даниилович", "Валерьянович", "Дмитриевич", "Сидорович", "Евстафиевич", "Казимирович", "Феликсович", "Агапович", "Фомевич", "Прохорович", "Гаврилевич", "Назарович", "Фролович", "Онисимович", "Владиславович", "Филиппович", "Самсонович", "Кондратович", "Самуилович", "Александрович", "Тихонович", "Климентович", "Карлович", "Яковович", "Левович", "Епифанович", "Чеславович", "Андриянович", "Федорович", "Ираклиевич", "Олегович", "Кириллович", "Ермолаевич", "Артемович", "Ростиславович", "Онуфриевич", "Федосиевич", "Пахомович", "Герасимович", "Касьянович", "Гордеевич", "Модестович", "Потапович", "Трофимович", "Архипович", "Михеевич", "Владимирович", "Григориевич", "Капитонович", "Аникитевич", "Арсениевич", "Евлампиевич", "Елизарович", "Андроникович", "Саввевич", "Ульянович", "Филимонович", "Михаилович", "Андронович", "Федотович", "Зиновиевич", "Эдуардович", "Юриевич", "Феоктистович", "Ипатович", "Якубович", "Тарасович", "Ипатиевич", "Изяславович", "Святославович", "Давидович", "Мечиславович", "Леонтиевич", "Викентиевич", "Всеволодович", "Сократович", "Егорович", "Натанович", "Аполлинариевич", "Панкратиевич", "Никанорович", "Адамович", "Тимурович", "Никитевич", "Мартьянович", "Глебович", "Андреевич", "Платонович", "Венедиктович", "Соломоновна", "Захаровна", "Михаиловна", "Моисеевна", "Денисовна", "Андрияновна", "Вадимовна", "Данилевна", "Феодосьевна", "Ипполитовна", "Сократовна", "Агафоновна", "Петровна", "Тимуровна", "Измаиловна", "Карповна", "Данииловна", "Олеговна", "Елизаровна", "Эрнестовна", "Юлиевна", "Родионовна", "Эдуардовна", "Платоновна", "Аристарховна", "Серафимовна", "Григоргиевна", "Семеновна", "Артеименовна", "Федотовна", "Геннадиевна", "Валерьевна", "Зиновьевна", "Игнатьеивна", "Богдановна", "Якововна", "Вацлавовна", "Адамовна", "Яновна", "Афанасиевна", "Сигизмундовна", "Евдокимовна", "Георгиевна", "Эммануиловна", "Евсеевна", "Артуровна", "Глебовна", "Сергеевна", "Гавриловна", "Бориславовна", "Артемовна", "Игнатиевна", "Прохоровна", "Ростиславовна", "Кирилловна", "Ярославовна", "Поликарповна", "Макаровна", "Данилаивна", "Несторовна", "Федоровна", "Матвеевна", "Пахомовна", "Авдеевна", "Иларионовна", "Кировна", "Владленовна", "Дмитриевна", "Порфириевна", "Анатолиевна", "Евграфовна", "Емельяновна", "Брониславовна", "Владиславовна", "Аркадиевна", "Василиевна", "Назаровна", "Харитоновна", "Никифоровна", "Борисовна", "Юрьевна", "Лукьяновна", "Евгениевна", "Валентиновна", "Никитевна", "Прокловна", "Карловна", "Казимировна", "Арсентиевна", "Гаврииловна", "Андреевна", "Прокофьевна", "Павловна", "Евремовна", "Рубеновна", "Савелиевна", "Антоновна", "Ефимовна", "Артемовна", "Кузьмевна", "Кондратьевна", "Авдеевна", "Иннокентиевна", "Леонидовна", "Арсентиевна", "Ипполитовна", "Никифоровна", "Валерьевна", "Федотовна", "Федоровна", "Агаповна", "Мирославовна", "Емельяновна", "Мстиславовна", "Сократовна", "Филимоновна", "Руслановна", "Михеевна", "Аскольдовна", "Олеговна", "Филипповна", "Евграфовна", "Агафоновна", "Тимофеевна", "Глебовна", "Семеновна", "Николаевна", "Карловна", "Константиновна", "Харитоновна", "Кондратьевна", "Андриановна", "Елисеевна", "Евсеевна", "Ульяновна", "Пахомовна", "Порфириевна", "Иларионовна", "Евлампиевна", "Афанасиевна", "Эммануиловна", "Василиевна", "Евстигнеевна", "Эдуардовна", "Карповна", "Елизаровна", "Самуиловна", "Поликарповна", "Игоревна", "Максимильяновна", "Александровна", "Наумовна", "Михаиловна", "Родионовна", "Соломоновна", "Адамовна", "Кировна", "Натановна", "Святославовна", "Брониславовна", "Тарасовна", "Фомевна", "Виссарионовна", "Несторовна", "Игнатиевна", "Вацлавовна", "Дмитриевна", "Серафимовна", "Вячеславовна", "Сергеевна", "Измаиловна", "Тимуровна", "Рюриковна", "Евгениевна", "Евдокимовна", "Денисовна", "Юрьевна", "Игнатьеивна", "Степановна", "Андреевна", "Владимировна", "Андрияновна", "Данилевна", "Мартыновна", "Павловна", "Яновна", "Матвеевна", "Владиславовна", "Григоргиевна", "Остаповна", "Терентьевна", "Радиславовна", "Никоновна", "Якововна", "Данииловна", "Мечиславовна", "Казимировна", "Евремовна", "Викторовна", "Клавдиевна", "Карповна", "Серафимовна", "Родионовна", "Ивановна", "Михаиловна", "Ильевна", "Евграфовна", "Евдокимовна", "Евгениевна", "Чеславовна", "Тимофеевна", "Кирилловна", "Владиславовна", "Макаровна", "Прокофьевна", "Тимуровна", "Валерьевна", "Натановна", "Яновна", "Фомевна", "Самсоновна", "Сократовна", "Игнатьеивна", "Виссарионовна", "Радиславовна", "Герасимовна", "Вацлавовна", "Артемовна", "Юрьевна", "Романовна", "Вадимовна", "Феодосьевна", "Елисеевна", "Игнатиевна", "Лукьяновна", "Ростиславовна", "Денисовна", "Данилаивна", "Савелиевна", "Юлиевна", "Терентьевна", "Порфириевна", "Якубовна", "Феликсовна", "Михеевна", "Адамовна", "Самуиловна", "Сергеевна", "Назаровна", "Антиповна", "Карловна", "Прохоровна", "Трофимовна", "Александровна", "Сигизмундовна", "Семеновна", "Филипповна", "Мартыновна", "Павловна", "Евремовна", "Валентиновна", "Авдеевна", "Аристарховна", "Кировна", "Поликарповна", "Платоновна", "Мефодиевна", "Емельяновна", "Степановна", "Егоровна", "Архиповна", "Мироновна", "Максимовна", "Аркадиевна", "Ульяновна", "Рубеновна", "Владиленовна", "Наумовна", "Всеволодовна", "Ираклиевна", "Германовна", "Владленовна", "Матвеевна", "Потаповна", "Кузьмевна", "Вениаминовна", "Николаевна", "Елизаровна", "Иннокентиевна", "Богдановна", "Виталиевна", "Капитоновна", "Никоновна", "Константиновна", "Измаиловна", "Давидовна", "Артемовна", "Андриановна", "Ефимовна", "Евсеевна", "Ипатиевич", "Ефремович", "Анатолиевич", "Епифанович", "Титович", "Федорович", "Ираклиевич", "Демьянович", "Афанасиевич", "Всеволодович", "Трофимович", "Кондратиевич", "Натанович", "Захарович", "Денисович", "Гаврилевич", "Игоревич", "Эрнстович", "Эрнестович", "Феликсович", "Андриянович", "Чеславович", "Владиславович", "Дмитриевич", "Филиппович", "Михаилович", "Александрович", "Богданович", "Зиновиевич", "Ипатович", "Никитевич", "Адрианович", "Валерьянович", "Давыдович", "Севастьянович", "Мечиславович", "Куприянович", "Мирославович", "Аникитевич", "Карлович", "Сократович", "Иосифович", "Геннадиевич", "Саввевич", "Измаилович", "Феоктистович", "Остапович", "Капитонович", "Потапович", "Герасимович", "Сидорович", "Евграфович", "Родионович", "Сигизмундович", "Панкратиевич", "Вадимович", "Онисимович", "Савелиевич", "Яковович", "Евлампиевич", "Евгениевич", "Викентиевич", "Игнатиевич", "Кириллович", "Мартьянович", "Евстафиевич", "Егорович", "Олегович", "Владимирович", "Аполлинариевич", "Андреевич", "Юриевич", "Святославович", "Никонович", "Кондратович", "Ульянович", "Несторович", "Агапович", "Назарович", "Прокофиевич", "Федосиевич", "Левович", "Самуилович", "Фомевич", "Леонидович", "Алексеевич", "Елисеевич", "Касьянович", "Адамович", "Данилевич", "Ростиславович", "Валериевич", "Артемович", "Иннокентиевич", "Макарович", "Ерофеевич", "Якубович", "Матвеевич", "Казимирович", "Миронович", "Матвеевич", "Брониславович", "Кириллович", "Ипполитович", "Никонович", "Иннокентиевич", "Мечиславович", "Архипович", "Евстафиевич", "Гордеевич", "Елизарович", "Эрнстович", "Эрнестович", "Ерофеевич", "Фролович", "Адрианович", "Касьянович", "Олегович", "Сократович", "Валериевич", "Никифорович", "Герасимович", "Эмилевич", "Титович", "Моисеевич", "Самуилович", "Ефремович", "Адамович", "Остапович", "Ильевич", "Филимонович", "Ираклиевич", "Давыдович", "Чеславович", "Наумович", "Назарович", "Тарасович", "Богданович", "Вячеславович", "Феоктистович", "Давидович", "Демьянович", "Потапович", "Прокофиевич", "Севастьянович", "Еремеевич", "Никанорович", "Евлампиевич", "Александрович", "Сергеевич", "Карлович", "Гаврилевич", "Мирославович", "Денисович", "Куприянович", "Прохорович", "Евграфович", "Несторович", "Федорович", "Вадимович", "Яковович", "Модестович", "Всеволодович", "Зиновиевич", "Федотович", "Афанасиевич", "Валерьянович", "Федосиевич", "Сидорович", "Геннадиевич", "Леонович", "Якубович", "Мартьянович", "Дмитриевич", "Анатолиевич", "Никитевич", "Елисеевич", "Аполлинариевич", "Григориевич", "Данилевич", "Самсонович", "Панкратиевич", "Ростиславович", "Алексеевич", "Трофимович", "Владимирович", "Ермолаевич", "Глебович", "Макарович", "Климентович", "Андриянович", "Андронович", "Иванович", "Пахомович", "Тихонович", "Серафимович", "Филиппович", "Эдуардович", "Иосифович", "Маркович" };
            List<string> district = new List<string>() { "Будённовский", "Калининский", "Кировский", "Куйбышевский", "Ворошиловский", "Киевский", "Ленинский", "Петровский", "Пролетарский" };
            List<string> type_property = new List<string>() { "Государственный", "Муниципальный", "Частный", "Предприятие", "Коллективный" };
            List<string> garden_assistance = new List<string>() { "Поставка продуктов", "Поставка мебели", "Поставка медикаментов", "Ремонт", "Оплата экскурсии", "Денежная помощь" };
            List<string> type_ownership = new List<string>() { "Государственная", "Муниципальная", "Частная", "Совместная", "Индивидуальная", "Коллективная", "ЗАО", "ООО", "ОАО", "ПАО", "НАО", "ЧП", "ИП", "АО" };
            List<string> children_assistance = new List<string>() { "Оплата лечения", "Денежная помощь", "Покупка детского питания", "Покупка одежды", "Оплата отдыха в лагере", "Покупка жилья", "Покупка игрушек" };
            List<string> group = new List<string>() { "Младшая", "Старшая", "Средняя", "Подготовительная" };
            List<string> kindergarten_caption = new List<string>() { "Айболит", "Антошка", "Бармалейкин", "Белоснежка", "Буратино", "Бэмби", "Бэмби бэби", "В гостях у Маши", "В гостях у сказки", "Гномик", "Джамбо", "Домик Матушки Гусыни", "Домик-Сказка", "Домовёнок", "Домовёнок", "Домовята", "Дракоша", "Дюймовочка", "ЖарПтица", "Жар-птица", "Жили-Были", "Забава", "Звёздная сказка", "Золотая рыбка", "Золотой ключик" };
            List<string> company_name = new List<string>() { "Новые горизонты", "Норд-Вест", "ОНМЦ", "Орбита+", "Орлан", "ОСТО МАИ", "Паритет", "Парсек", "Патриот", "Перспектива", "Пилигрим", "Пионер", "Победа", "Полина", "Политех", "Практика", "Престиж", "Приоритет", "Проспект", "ПРОФИ", "Пульс", "Развитие", "Рамдосааф", "РЕАЛ", "Форпост" };
            List<string> kemployee = new List<string>() { "Сотрудник_сада_1", "Сотрудник_сада_2", "Сотрудник_сада_3", "Сотрудник_сада_4", "Сотрудник_сада_5", "Сотрудник_сада_6", "Сотрудник_сада_7", "Сотрудник_сада_8", "Сотрудник_сада_9", "Сотрудник_сада_10", "Сотрудник_сада_11", "Сотрудник_сада_12", "Сотрудник_сада_13", "Сотрудник_сада_14", "Сотрудник_сада_15", "Сотрудник_сада_16", "Сотрудник_сада_17", "Сотрудник_сада_18", "Сотрудник_сада_19", "Сотрудник_сада_20", "Сотрудник_сада_21", "Сотрудник_сада_22", "Сотрудник_сада_23", "Сотрудник_сада_24", "Сотрудник_сада_25", "Сотрудник_сада_26", "Сотрудник_сада_27", "Сотрудник_сада_28", "Сотрудник_сада_29", "Сотрудник_сада_30", "Сотрудник_сада_31", "Сотрудник_сада_32", "Сотрудник_сада_33", "Сотрудник_сада_34", "Сотрудник_сада_35", "Сотрудник_сада_36", "Сотрудник_сада_37", "Сотрудник_сада_38", "Сотрудник_сада_39", "Сотрудник_сада_40", "Сотрудник_сада_41", "Сотрудник_сада_42", "Сотрудник_сада_43", "Сотрудник_сада_44", "Сотрудник_сада_45", "Сотрудник_сада_46", "Сотрудник_сада_47", "Сотрудник_сада_48", "Сотрудник_сада_49", "Сотрудник_сада_50", "Сотрудник_сада_51", "Сотрудник_сада_52", "Сотрудник_сада_53", "Сотрудник_сада_54", "Сотрудник_сада_55", "Сотрудник_сада_56", "Сотрудник_сада_57", "Сотрудник_сада_58", "Сотрудник_сада_59", "Сотрудник_сада_60", "Сотрудник_сада_61", "Сотрудник_сада_62", "Сотрудник_сада_63", "Сотрудник_сада_64", "Сотрудник_сада_65", "Сотрудник_сада_66", "Сотрудник_сада_67", "Сотрудник_сада_68", "Сотрудник_сада_69", "Сотрудник_сада_70", "Сотрудник_сада_71", "Сотрудник_сада_72", "Сотрудник_сада_73", "Сотрудник_сада_74", "Сотрудник_сада_75", "Сотрудник_сада_76", "Сотрудник_сада_77", "Сотрудник_сада_78", "Сотрудник_сада_79", "Сотрудник_сада_80", "Сотрудник_сада_81", "Сотрудник_сада_82", "Сотрудник_сада_83", "Сотрудник_сада_84", "Сотрудник_сада_85", "Сотрудник_сада_86", "Сотрудник_сада_87", "Сотрудник_сада_88", "Сотрудник_сада_89", "Сотрудник_сада_90", "Сотрудник_сада_91", "Сотрудник_сада_92", "Сотрудник_сада_93", "Сотрудник_сада_94", "Сотрудник_сада_95", "Сотрудник_сада_96", "Сотрудник_сада_97", "Сотрудник_сада_98", "Сотрудник_сада_99", "Сотрудник_сада_100" };
            List<string> cemployee = new List<string>() { "Сотрудник_предприятия_1", "Сотрудник_предприятия_2", "Сотрудник_предприятия_3", "Сотрудник_предприятия_4", "Сотрудник_предприятия_5", "Сотрудник_предприятия_6", "Сотрудник_предприятия_7", "Сотрудник_предприятия_8", "Сотрудник_предприятия_9", "Сотрудник_предприятия_10", "Сотрудник_предприятия_11", "Сотрудник_предприятия_12", "Сотрудник_предприятия_13", "Сотрудник_предприятия_14", "Сотрудник_предприятия_15", "Сотрудник_предприятия_16", "Сотрудник_предприятия_17", "Сотрудник_предприятия_18", "Сотрудник_предприятия_19", "Сотрудник_предприятия_20", "Сотрудник_предприятия_21", "Сотрудник_предприятия_22", "Сотрудник_предприятия_23", "Сотрудник_предприятия_24", "Сотрудник_предприятия_25", "Сотрудник_предприятия_26", "Сотрудник_предприятия_27", "Сотрудник_предприятия_28", "Сотрудник_предприятия_29", "Сотрудник_предприятия_30", "Сотрудник_предприятия_31", "Сотрудник_предприятия_32", "Сотрудник_предприятия_33", "Сотрудник_предприятия_34", "Сотрудник_предприятия_35", "Сотрудник_предприятия_36", "Сотрудник_предприятия_37", "Сотрудник_предприятия_38", "Сотрудник_предприятия_39", "Сотрудник_предприятия_40", "Сотрудник_предприятия_41", "Сотрудник_предприятия_42", "Сотрудник_предприятия_43", "Сотрудник_предприятия_44", "Сотрудник_предприятия_45", "Сотрудник_предприятия_46", "Сотрудник_предприятия_47", "Сотрудник_предприятия_48", "Сотрудник_предприятия_49", "Сотрудник_предприятия_50", "Сотрудник_предприятия_51", "Сотрудник_предприятия_52", "Сотрудник_предприятия_53", "Сотрудник_предприятия_54", "Сотрудник_предприятия_55", "Сотрудник_предприятия_56", "Сотрудник_предприятия_57", "Сотрудник_предприятия_58", "Сотрудник_предприятия_59", "Сотрудник_предприятия_60", "Сотрудник_предприятия_61", "Сотрудник_предприятия_62", "Сотрудник_предприятия_63", "Сотрудник_предприятия_64", "Сотрудник_предприятия_65", "Сотрудник_предприятия_66", "Сотрудник_предприятия_67", "Сотрудник_предприятия_68", "Сотрудник_предприятия_69", "Сотрудник_предприятия_70", "Сотрудник_предприятия_71", "Сотрудник_предприятия_72", "Сотрудник_предприятия_73", "Сотрудник_предприятия_74", "Сотрудник_предприятия_75", "Сотрудник_предприятия_76", "Сотрудник_предприятия_77", "Сотрудник_предприятия_78", "Сотрудник_предприятия_79", "Сотрудник_предприятия_80", "Сотрудник_предприятия_81", "Сотрудник_предприятия_82", "Сотрудник_предприятия_83", "Сотрудник_предприятия_84", "Сотрудник_предприятия_85", "Сотрудник_предприятия_86", "Сотрудник_предприятия_87", "Сотрудник_предприятия_88", "Сотрудник_предприятия_89", "Сотрудник_предприятия_90", "Сотрудник_предприятия_91", "Сотрудник_предприятия_92", "Сотрудник_предприятия_93", "Сотрудник_предприятия_94", "Сотрудник_предприятия_95", "Сотрудник_предприятия_96", "Сотрудник_предприятия_97", "Сотрудник_предприятия_98", "Сотрудник_предприятия_99", "Сотрудник_предприятия_100" };
            if (label1.Text == "район")
            {
                npgSqlConnection = new NpgsqlConnection(connectionString);
                npgSqlConnection.Open();
                try
                {
                    for (int i = 0; i < district.Count; i++)
                    {
                        NpgsqlCommand sqlCommand = new NpgsqlCommand("INSERT INTO \"District\"(district)" +
                            " VALUES('" + district[i] + "');", npgSqlConnection);
                        sqlCommand.ExecuteNonQuery();
                    }
                    command_sql_select();
                    Load_dataGridView();
                }
                catch (Exception ex)
                {
                    MessageBox.Show(ex.Message);
                }
                npgSqlConnection.Close();
            }

            if (label1.Text == "тип собственности")
            {
                npgSqlConnection = new NpgsqlConnection(connectionString);
                npgSqlConnection.Open();
                try
                {
                    for (int i = 0; i < type_property.Count; i++)
                    {
                        NpgsqlCommand sqlCommand = new NpgsqlCommand("INSERT INTO \"Type of property\"(type)" +
                            " VALUES('" + type_property[i] + "');", npgSqlConnection);
                        sqlCommand.ExecuteNonQuery();
                    }
                    command_sql_select();
                    Load_dataGridView();
                }
                catch (Exception ex)
                {
                    MessageBox.Show(ex.Message);
                }
                npgSqlConnection.Close();
            }

            if (label1.Text == "вид помощи садам")
            {
                npgSqlConnection = new NpgsqlConnection(connectionString);
                npgSqlConnection.Open();
                try
                {
                    for (int i = 0; i < garden_assistance.Count; i++)
                    {
                        NpgsqlCommand sqlCommand = new NpgsqlCommand("INSERT INTO \"Type of garden assistance\"(type)" +
                            " VALUES('" + garden_assistance[i] + "');", npgSqlConnection);
                        sqlCommand.ExecuteNonQuery();
                    }
                    command_sql_select();
                    Load_dataGridView();
                }
                catch (Exception ex)
                {
                    MessageBox.Show(ex.Message);
                }
                npgSqlConnection.Close();
            }

            if (label1.Text == "форма собственности")
            {
                npgSqlConnection = new NpgsqlConnection(connectionString);
                npgSqlConnection.Open();
                try
                {
                    for (int i = 0; i < type_ownership.Count; i++)
                    {
                        NpgsqlCommand sqlCommand = new NpgsqlCommand("INSERT INTO \"Type of ownership\"(type)" +
                            " VALUES('" + type_ownership[i] + "');", npgSqlConnection);
                        sqlCommand.ExecuteNonQuery();
                    }
                    command_sql_select();
                    Load_dataGridView();
                }
                catch (Exception ex)
                {
                    MessageBox.Show(ex.Message);
                }
                npgSqlConnection.Close();
            }

            if (label1.Text == "вид помощи детям")
            {
                npgSqlConnection = new NpgsqlConnection(connectionString);
                npgSqlConnection.Open();
                try
                {
                    for (int i = 0; i < children_assistance.Count; i++)
                    {
                        NpgsqlCommand sqlCommand = new NpgsqlCommand("INSERT INTO \"Type of children assistance\"(type)" +
                            " VALUES('" + children_assistance[i] + "');", npgSqlConnection);
                        sqlCommand.ExecuteNonQuery();
                    }
                    command_sql_select();
                    Load_dataGridView();
                }
                catch (Exception ex)
                {
                    MessageBox.Show(ex.Message);
                }
                npgSqlConnection.Close();
            }

            if (label1.Text == "группа")
            {
                npgSqlConnection = new NpgsqlConnection(connectionString);
                npgSqlConnection.Open();
                try
                {
                    for (int i = 0; i < group.Count; i++)
                    {
                        NpgsqlCommand sqlCommand = new NpgsqlCommand("INSERT INTO \"Group\"(\"group\")" +
                            " VALUES('" + group[i] + "');", npgSqlConnection);
                        sqlCommand.ExecuteNonQuery();
                    }
                    command_sql_select();
                    Load_dataGridView();
                }
                catch (Exception ex)
                {
                    MessageBox.Show(ex.Message);
                }
                npgSqlConnection.Close();
            }

            if (label1.Text == "детский сад")
            {
                int t = 10; int year = 2000; int id_district = 1; int id_type = 1;
                npgSqlConnection = new NpgsqlConnection(connectionString);
                npgSqlConnection.Open();
                try
                {
                    for (int i = 0; i < kindergarten_caption.Count; i++)
                    {
                        NpgsqlCommand sqlCommand = new NpgsqlCommand("INSERT INTO \"Kindergarten\"(caption, id_district, id_type, year_of_open, phone)" +
                            " VALUES('" + kindergarten_caption[i] + "', " + id_district + "," + id_type + "," + year + ",'+38071" + t + "487" + t + "');", npgSqlConnection);
                        sqlCommand.ExecuteNonQuery();
                        id_district++; if (id_district == 10) { id_district = 1; }
                        id_type++; if (id_type == 6) { id_type = 1; }
                        year++; if (year == 2021) { year = 2000; }
                        t++; if (t == 100) { t = 10; }
                    }
                    command_sql_select();
                    Load_dataGridView();
                }
                catch (Exception ex)
                {
                    MessageBox.Show(ex.Message);
                }
                npgSqlConnection.Close();
            }

            if (label1.Text == "предприятие")
            {
                int t = 10; int employees = 50; int year = 1980; int id_type = 1;
                npgSqlConnection = new NpgsqlConnection(connectionString);
                npgSqlConnection.Open();
                try
                {
                    for (int i = 0; i < company_name.Count; i++)
                    {
                        NpgsqlCommand sqlCommand = new NpgsqlCommand("INSERT INTO \"Company\"(name, id_type, phone, year, employees)" +
                            " VALUES('" + company_name[i] + "'," + id_type + ",'+38071" + t + "487" + t + "', " + year + ", " + employees + ");", npgSqlConnection);
                        sqlCommand.ExecuteNonQuery();
                        id_type++; if (id_type == 15) { id_type = 1; }
                        t++; if (t == 100) { t = 10; }
                        year++; if (year == 2021) { year = 2000; }
                        employees += 13; if (employees > 200) { employees = 50; }
                    }
                    command_sql_select();
                    Load_dataGridView();
                }
                catch (Exception ex)
                {
                    MessageBox.Show(ex.Message);
                }
                npgSqlConnection.Close();
            }

            if (label1.Text == "сотрудник детского сада")
            {
                int id_kindergarten = 1;
                npgSqlConnection = new NpgsqlConnection(connectionString);
                npgSqlConnection.Open();
                try
                {
                    for (int i = 0; i < 100; i++)
                    {

                        /*NpgsqlCommand sqlCommand = new NpgsqlCommand("INSERT INTO \"Employee of the kindergarten\"(login, id_kindergarten)" +
                            " VALUES('" + kemployee[i] + "'," + id_kindergarten + ");", npgSqlConnection);
                        sqlCommand.ExecuteNonQuery();*/
                        sqlCommand = new NpgsqlCommand("CREATE ROLE \"" + kemployee[i] + "\" login PASSWORD '12345'; GRANT \"kemployee\" TO \"" + kemployee[i] + "\" WITH ADMIN OPTION;", npgSqlConnection);
                        sqlCommand.ExecuteNonQuery();
                       //id_kindergarten++; if (id_kindergarten == 26) { id_kindergarten = 1; }
                    }
                    command_sql_select();
                    Load_dataGridView();
                }
                catch (Exception ex)
                {
                    MessageBox.Show(ex.Message);
                }
                npgSqlConnection.Close();
            }

            if (label1.Text == "сотрудник предприятия")
            {
                int id_company = 1;
                npgSqlConnection = new NpgsqlConnection(connectionString);
                npgSqlConnection.Open();
                try
                {
                    for (int i = 0; i < 100; i++)
                    {

                        /*NpgsqlCommand sqlCommand = new NpgsqlCommand("INSERT INTO \"Employee of the company\"(login, id_company)" +
                            " VALUES('" + cemployee[i] + "'," + id_company + ");", npgSqlConnection);
                        sqlCommand.ExecuteNonQuery();*/
                        sqlCommand = new NpgsqlCommand("CREATE ROLE \"" + cemployee[i] + "\" login PASSWORD '12345'; GRANT \"cemployee\" TO \"" + cemployee[i] + "\" WITH ADMIN OPTION;", npgSqlConnection);
                        sqlCommand.ExecuteNonQuery();
                        //id_company++; if (id_company == 26) { id_company = 1; }
                    }
                    command_sql_select();
                    Load_dataGridView();
                }
                catch (Exception ex)
                {
                    MessageBox.Show(ex.Message);
                }
                npgSqlConnection.Close();
            }

            if (label1.Text == "ребёнок")
            {
                int id_group = 1; int id_kindergarten = 1;int day = 1; int month = 1; int year = 2015;
                npgSqlConnection = new NpgsqlConnection(connectionString);
                npgSqlConnection.Open();
                try
                {
                    for (int i = 0; i < surname.Count; i++)
                    {

                        NpgsqlCommand sqlCommand = new NpgsqlCommand("INSERT INTO \"Child\"(surname, name, patronymic, birthday, id_group, id_kindergarten)" +
                            " VALUES('" + surname[i] + "','" + name[i] + "','" + patronymic[i] + "','" + day + "." + month + "." + year + "'," + id_group + "," + id_kindergarten + ");", npgSqlConnection);
                        sqlCommand.ExecuteNonQuery();
                        day++; if (day == 31) { day = 1; }
                        month++; if (month == 13) { month = 1; }
                        year++; if (year == 2020) { year = 2015; }
                        id_group++; if (id_group == 5) { id_group = 1; }
                        id_kindergarten++; if (id_kindergarten == 26) { id_kindergarten = 1; }
                    }
                    command_sql_select();
                    Load_dataGridView();
                }
                catch (Exception ex)
                {
                    MessageBox.Show(ex.Message);
                }
                npgSqlConnection.Close();
            }

            if (label1.Text == "помощь детским садам")
            {

                int day = 1; int month = 1; int year = 2015; int cost = 1000; int id_company = 1; int id_type = 1; int id_kindergarten = 1; 
                npgSqlConnection = new NpgsqlConnection(connectionString);
                npgSqlConnection.Open();
                try
                {
                    for (int i = 0; i < 50000; i++)
                    {
                        NpgsqlCommand sqlCommand = new NpgsqlCommand("INSERT INTO \"Assistance to kindergarten\"(id_kindergarten, id_type, cost, date, id_company)" +
                            " VALUES(" + id_kindergarten + ", " + id_type + ", " + cost + ",'" + day + "." + month + "." + year + "'," + id_company + ");", npgSqlConnection);
                        sqlCommand.ExecuteNonQuery();
                        id_company++; if (id_company == 26) { id_company = 1; }
                        id_type++; if (id_type == 7) { id_type = 1; }
                        id_kindergarten++; if (id_kindergarten == 26) { id_kindergarten = 1; }
                        day++; if (day == 31) { day = 1; }
                        month++; if (month == 13) { month = 1; }
                        year++; if (year == 2020) { year = 2015; }
                        cost += 300; if (cost >= 25000) { cost = 1000; }
                    }
                    command_sql_select();
                    Load_dataGridView();
                }
                catch (Exception ex)
                {
                    MessageBox.Show(ex.Message);
                }
                npgSqlConnection.Close();
            }

            if (label1.Text == "помощь детям")
            {

                int day = 1; int month = 1; int year = 2015; int cost = 1000; int id_company = 1; int id_type = 1; int id_child = 1;
                npgSqlConnection = new NpgsqlConnection(connectionString);
                npgSqlConnection.Open();
                try
                {
                    for (int i = 0; i < 50000; i++)
                    {
                        NpgsqlCommand sqlCommand = new NpgsqlCommand("INSERT INTO \"Assistance to children\"(id_child, id_type, cost, date, id_company)" +
                            " VALUES(" + id_child + ", " + id_type + ", " + cost + ",'" + day + "." + month + "." + year + "'," + id_company + ");", npgSqlConnection);
                        sqlCommand.ExecuteNonQuery();
                        id_company++; if (id_company == 26) { id_company = 1; }
                        id_type++; if (id_type == 5) { id_type = 1; }
                        id_child++; if (id_child == 699) { id_child = 1; }
                        day++; if (day == 31) { day = 1; }
                        month++; if (month == 13) { month = 1; }
                        year++; if (year == 2020) { year = 2015; }
                        cost += 300; if (cost >= 25000) { cost = 1000; }
                    }
                    command_sql_select();
                    Load_dataGridView();
                }
                catch (Exception ex)
                {
                    MessageBox.Show(ex.Message);
                }
                npgSqlConnection.Close();
            }
        }

        private void DB_FormClosing(object sender, FormClosingEventArgs e)
        {
            Hide();
            new Login().Show();
        }

        private void label2_Click(object sender, EventArgs e)
        {
            command_sql_select();
            Load_dataGridView();
        }
        
    }             
}